name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types:
      - published

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: x86_64-apple-darwin
            runner: macos-13
          - target: aarch64-apple-darwin
            runner: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
        echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }} --bin ipc_bench

    - name: Create archive
      run: |
        mkdir -p dist
        ARCHIVE="ipc_ring-${{ github.ref_name }}-${{ matrix.target }}.tar.gz"
        tar -czf "dist/$ARCHIVE" -C "target/${{ matrix.target }}/release" ipc_bench

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}
        path: dist/*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*/*.tar.gz
        generate_release_notes: true

  publish:
    name: Publish to crates.io
    needs: release
    runs-on: ubuntu-latest
    if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')"

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Determine publish requirement
      id: publish_check
      env:
        CRATE_NAME: ipc_ring
      run: |
        set -euo pipefail
        CRATE_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r ".packages[] | select(.name==\"${CRATE_NAME}\") | .version")
        SEARCH_OUTPUT=$(mktemp)
        PUBLISHED_VERSION="not-found"
        if cargo search "${CRATE_NAME}" --limit 1 > "${SEARCH_OUTPUT}"; then
          FIRST_LINE=$(head -n 1 "${SEARCH_OUTPUT}")
          if printf '%s\n' "${FIRST_LINE}" | grep -q "^${CRATE_NAME} "; then
            PARSED=$(printf '%s\n' "${FIRST_LINE}" | awk -F'"' '{print $2}')
            if [ -n "${PARSED}" ]; then
              PUBLISHED_VERSION="${PARSED}"
            fi
          fi
        fi
        if [ "${PUBLISHED_VERSION}" = "not-found" ]; then
          PUBLISHED_VERSION=$(curl -sSf -H "User-Agent: ipc-ring-release-workflow (+https://github.com/${{ github.repository }})" \
            "https://crates.io/api/v1/crates/${CRATE_NAME}" | jq -r '.crate.max_version' || echo "not-found")
        fi
        SHOULD_PUBLISH="true"
        if [ -z "${PUBLISHED_VERSION}" ] || [ "${PUBLISHED_VERSION}" = "null" ]; then
          PUBLISHED_VERSION="not-found"
        elif [ "${CRATE_VERSION}" = "${PUBLISHED_VERSION}" ]; then
          SHOULD_PUBLISH="false"
        fi
        {
          echo "crate_version=${CRATE_VERSION}"
          echo "published_version=${PUBLISHED_VERSION}"
          echo "should_publish=${SHOULD_PUBLISH}"
        } >> "${GITHUB_OUTPUT}"

    - name: Publish to crates.io
      if: steps.publish_check.outputs.should_publish == 'true'
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
